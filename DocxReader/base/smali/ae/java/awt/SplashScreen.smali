.class public final Lae/java/awt/SplashScreen;
.super Ljava/lang/Object;
.source "SplashScreen.java"


# static fields
.field private static final log:Ljava/util/logging/Logger;

.field private static theInstance:Lae/java/awt/SplashScreen;

.field private static wasClosed:Z


# instance fields
.field private image:Lae/java/awt/image/BufferedImage;

.field private imageURL:Ljava/net/URL;

.field private final splashPtr:J


# direct methods
.method static constructor <clinit>()V
    .locals 1

    .prologue
    .line 346
    const/4 v0, 0x0

    sput-boolean v0, Lae/java/awt/SplashScreen;->wasClosed:Z

    .line 357
    const/4 v0, 0x0

    sput-object v0, Lae/java/awt/SplashScreen;->theInstance:Lae/java/awt/SplashScreen;

    .line 359
    const-string v0, "ae.java.awt.SplashScreen"

    invoke-static {v0}, Ljava/util/logging/Logger;->getLogger(Ljava/lang/String;)Ljava/util/logging/Logger;

    move-result-object v0

    sput-object v0, Lae/java/awt/SplashScreen;->log:Ljava/util/logging/Logger;

    return-void
.end method

.method constructor <init>(J)V
    .locals 1
    .param p1, "ptr"    # J

    .prologue
    .line 90
    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    .line 91
    iput-wide p1, p0, Lae/java/awt/SplashScreen;->splashPtr:J

    .line 92
    return-void
.end method

.method private static native _close(J)V
.end method

.method private static native _getBounds(J)Lae/java/awt/Rectangle;
.end method

.method private static native _getImageFileName(J)Ljava/lang/String;
.end method

.method private static native _getImageJarName(J)Ljava/lang/String;
.end method

.method private static native _getInstance()J
.end method

.method private static native _isVisible(J)Z
.end method

.method private static native _setImageData(J[B)Z
.end method

.method private static native _update(J[IIIIII)V
.end method

.method private checkVisible()V
    .locals 2

    .prologue
    .line 182
    invoke-virtual {p0}, Lae/java/awt/SplashScreen;->isVisible()Z

    move-result v0

    if-nez v0, :cond_0

    .line 183
    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "no splash screen available"

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 185
    :cond_0
    return-void
.end method

.method public static getSplashScreen()Lae/java/awt/SplashScreen;
    .locals 6

    .prologue
    .line 106
    const-class v3, Lae/java/awt/SplashScreen;

    monitor-enter v3

    .line 107
    :try_start_0
    invoke-static {}, Lae/java/awt/GraphicsEnvironment;->isHeadless()Z

    move-result v2

    if-eqz v2, :cond_0

    .line 108
    new-instance v2, Lae/java/awt/HeadlessException;

    invoke-direct {v2}, Lae/java/awt/HeadlessException;-><init>()V

    throw v2

    .line 106
    .local v0, "ptr":J
    :catchall_0
    move-exception v2

    monitor-exit v3
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    throw v2

    .line 111
    .end local v0    # "ptr":J
    :cond_0
    :try_start_1
    sget-boolean v2, Lae/java/awt/SplashScreen;->wasClosed:Z

    if-nez v2, :cond_1

    sget-object v2, Lae/java/awt/SplashScreen;->theInstance:Lae/java/awt/SplashScreen;

    if-nez v2, :cond_1

    .line 113
    new-instance v2, Lsun/security/action/LoadLibraryAction;

    const-string v4, "splashscreen"

    invoke-direct {v2, v4}, Lsun/security/action/LoadLibraryAction;-><init>(Ljava/lang/String;)V

    .line 112
    invoke-static {v2}, Ljava/security/AccessController;->doPrivileged(Ljava/security/PrivilegedAction;)Ljava/lang/Object;

    .line 114
    invoke-static {}, Lae/java/awt/SplashScreen;->_getInstance()J

    move-result-wide v0

    .line 115
    .restart local v0    # "ptr":J
    const-wide/16 v4, 0x0

    cmp-long v2, v0, v4

    if-eqz v2, :cond_1

    invoke-static {v0, v1}, Lae/java/awt/SplashScreen;->_isVisible(J)Z

    move-result v2

    if-eqz v2, :cond_1

    .line 116
    new-instance v2, Lae/java/awt/SplashScreen;

    invoke-direct {v2, v0, v1}, Lae/java/awt/SplashScreen;-><init>(J)V

    sput-object v2, Lae/java/awt/SplashScreen;->theInstance:Lae/java/awt/SplashScreen;

    .line 119
    :cond_1
    sget-object v2, Lae/java/awt/SplashScreen;->theInstance:Lae/java/awt/SplashScreen;

    monitor-exit v3
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    return-object v2
.end method


# virtual methods
.method public close()V
    .locals 4
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Ljava/lang/IllegalStateException;
        }
    .end annotation

    .prologue
    .line 319
    const-class v1, Lae/java/awt/SplashScreen;

    monitor-enter v1

    .line 320
    :try_start_0
    invoke-direct {p0}, Lae/java/awt/SplashScreen;->checkVisible()V

    .line 321
    iget-wide v2, p0, Lae/java/awt/SplashScreen;->splashPtr:J

    invoke-static {v2, v3}, Lae/java/awt/SplashScreen;->_close(J)V

    .line 322
    const/4 v0, 0x0

    iput-object v0, p0, Lae/java/awt/SplashScreen;->image:Lae/java/awt/image/BufferedImage;

    .line 323
    const/4 v0, 0x1

    sput-boolean v0, Lae/java/awt/SplashScreen;->wasClosed:Z

    .line 324
    const/4 v0, 0x0

    sput-object v0, Lae/java/awt/SplashScreen;->theInstance:Lae/java/awt/SplashScreen;

    .line 319
    monitor-exit v1

    .line 326
    return-void

    .line 319
    :catchall_0
    move-exception v0

    monitor-exit v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    throw v0
.end method

.method public createGraphics()Lae/java/awt/Graphics2D;
    .locals 6
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Ljava/lang/IllegalStateException;
        }
    .end annotation

    .prologue
    .line 264
    const-class v2, Lae/java/awt/SplashScreen;

    monitor-enter v2

    .line 265
    :try_start_0
    iget-object v1, p0, Lae/java/awt/SplashScreen;->image:Lae/java/awt/image/BufferedImage;

    if-nez v1, :cond_0

    .line 266
    invoke-virtual {p0}, Lae/java/awt/SplashScreen;->getSize()Lae/java/awt/Dimension;

    move-result-object v0

    .line 267
    .local v0, "dim":Lae/java/awt/Dimension;
    new-instance v1, Lae/java/awt/image/BufferedImage;

    iget v3, v0, Lae/java/awt/Dimension;->width:I

    iget v4, v0, Lae/java/awt/Dimension;->height:I

    const/4 v5, 0x2

    invoke-direct {v1, v3, v4, v5}, Lae/java/awt/image/BufferedImage;-><init>(III)V

    iput-object v1, p0, Lae/java/awt/SplashScreen;->image:Lae/java/awt/image/BufferedImage;

    .line 269
    .end local v0    # "dim":Lae/java/awt/Dimension;
    :cond_0
    iget-object v1, p0, Lae/java/awt/SplashScreen;->image:Lae/java/awt/image/BufferedImage;

    invoke-virtual {v1}, Lae/java/awt/image/BufferedImage;->createGraphics()Lae/java/awt/Graphics2D;

    move-result-object v1

    monitor-exit v2

    return-object v1

    .line 264
    :catchall_0
    move-exception v1

    monitor-exit v2
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    throw v1
.end method

.method public getBounds()Lae/java/awt/Rectangle;
    .locals 4
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Ljava/lang/IllegalStateException;
        }
    .end annotation

    .prologue
    .line 229
    const-class v1, Lae/java/awt/SplashScreen;

    monitor-enter v1

    .line 230
    :try_start_0
    invoke-direct {p0}, Lae/java/awt/SplashScreen;->checkVisible()V

    .line 231
    iget-wide v2, p0, Lae/java/awt/SplashScreen;->splashPtr:J

    invoke-static {v2, v3}, Lae/java/awt/SplashScreen;->_getBounds(J)Lae/java/awt/Rectangle;

    move-result-object v0

    monitor-exit v1

    return-object v0

    .line 229
    :catchall_0
    move-exception v0

    monitor-exit v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    throw v0
.end method

.method public getImageURL()Ljava/net/URL;
    .locals 8
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Ljava/lang/IllegalStateException;
        }
    .end annotation

    .prologue
    .line 193
    const-class v4, Lae/java/awt/SplashScreen;

    monitor-enter v4

    .line 194
    :try_start_0
    invoke-direct {p0}, Lae/java/awt/SplashScreen;->checkVisible()V

    .line 195
    iget-object v3, p0, Lae/java/awt/SplashScreen;->imageURL:Ljava/net/URL;
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    if-nez v3, :cond_0

    .line 197
    :try_start_1
    iget-wide v6, p0, Lae/java/awt/SplashScreen;->splashPtr:J

    invoke-static {v6, v7}, Lae/java/awt/SplashScreen;->_getImageFileName(J)Ljava/lang/String;

    move-result-object v1

    .line 198
    .local v1, "fileName":Ljava/lang/String;
    iget-wide v6, p0, Lae/java/awt/SplashScreen;->splashPtr:J

    invoke-static {v6, v7}, Lae/java/awt/SplashScreen;->_getImageJarName(J)Ljava/lang/String;

    move-result-object v2

    .line 199
    .local v2, "jarName":Ljava/lang/String;
    if-eqz v1, :cond_0

    .line 200
    if-eqz v2, :cond_1

    .line 201
    new-instance v3, Ljava/net/URL;

    new-instance v5, Ljava/lang/StringBuilder;

    const-string v6, "jar:"

    invoke-direct {v5, v6}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    new-instance v6, Ljava/io/File;

    invoke-direct {v6, v2}, Ljava/io/File;-><init>(Ljava/lang/String;)V

    invoke-virtual {v6}, Ljava/io/File;->toURL()Ljava/net/URL;

    move-result-object v6

    invoke-virtual {v6}, Ljava/net/URL;->toString()Ljava/lang/String;

    move-result-object v6

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    const-string v6, "!/"

    invoke-virtual {v5, v6}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5, v1}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v5

    invoke-virtual {v5}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v5

    invoke-direct {v3, v5}, Ljava/net/URL;-><init>(Ljava/lang/String;)V

    iput-object v3, p0, Lae/java/awt/SplashScreen;->imageURL:Ljava/net/URL;
    :try_end_1
    .catch Ljava/net/MalformedURLException; {:try_start_1 .. :try_end_1} :catch_0
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 213
    .end local v1    # "fileName":Ljava/lang/String;
    .end local v2    # "jarName":Ljava/lang/String;
    :cond_0
    :goto_0
    :try_start_2
    iget-object v3, p0, Lae/java/awt/SplashScreen;->imageURL:Ljava/net/URL;

    monitor-exit v4
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_0

    return-object v3

    .line 203
    .restart local v1    # "fileName":Ljava/lang/String;
    .restart local v2    # "jarName":Ljava/lang/String;
    :cond_1
    :try_start_3
    new-instance v3, Ljava/io/File;

    invoke-direct {v3, v1}, Ljava/io/File;-><init>(Ljava/lang/String;)V

    invoke-virtual {v3}, Ljava/io/File;->toURL()Ljava/net/URL;

    move-result-object v3

    iput-object v3, p0, Lae/java/awt/SplashScreen;->imageURL:Ljava/net/URL;
    :try_end_3
    .catch Ljava/net/MalformedURLException; {:try_start_3 .. :try_end_3} :catch_0
    .catchall {:try_start_3 .. :try_end_3} :catchall_0

    goto :goto_0

    .line 207
    .end local v1    # "fileName":Ljava/lang/String;
    .end local v2    # "jarName":Ljava/lang/String;
    :catch_0
    move-exception v0

    .line 208
    .local v0, "e":Ljava/net/MalformedURLException;
    :try_start_4
    sget-object v3, Lae/java/awt/SplashScreen;->log:Ljava/util/logging/Logger;

    sget-object v5, Ljava/util/logging/Level;->FINE:Ljava/util/logging/Level;

    invoke-virtual {v3, v5}, Ljava/util/logging/Logger;->isLoggable(Ljava/util/logging/Level;)Z

    move-result v3

    if-eqz v3, :cond_0

    .line 209
    sget-object v3, Lae/java/awt/SplashScreen;->log:Ljava/util/logging/Logger;

    sget-object v5, Ljava/util/logging/Level;->FINE:Ljava/util/logging/Level;

    const-string v6, "MalformedURLException caught in the getImageURL() method"

    invoke-virtual {v3, v5, v6, v0}, Ljava/util/logging/Logger;->log(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V

    goto :goto_0

    .line 193
    .end local v0    # "e":Ljava/net/MalformedURLException;
    :catchall_0
    move-exception v3

    monitor-exit v4
    :try_end_4
    .catchall {:try_start_4 .. :try_end_4} :catchall_0

    throw v3
.end method

.method public getSize()Lae/java/awt/Dimension;
    .locals 1
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Ljava/lang/IllegalStateException;
        }
    .end annotation

    .prologue
    .line 247
    invoke-virtual {p0}, Lae/java/awt/SplashScreen;->getBounds()Lae/java/awt/Rectangle;

    move-result-object v0

    invoke-virtual {v0}, Lae/java/awt/Rectangle;->getSize()Lae/java/awt/Dimension;

    move-result-object v0

    return-object v0
.end method

.method public isVisible()Z
    .locals 4

    .prologue
    .line 338
    const-class v1, Lae/java/awt/SplashScreen;

    monitor-enter v1

    .line 339
    :try_start_0
    sget-boolean v0, Lae/java/awt/SplashScreen;->wasClosed:Z

    if-nez v0, :cond_0

    iget-wide v2, p0, Lae/java/awt/SplashScreen;->splashPtr:J

    invoke-static {v2, v3}, Lae/java/awt/SplashScreen;->_isVisible(J)Z

    move-result v0

    if-eqz v0, :cond_0

    const/4 v0, 0x1

    :goto_0
    monitor-exit v1

    return v0

    :cond_0
    const/4 v0, 0x0

    goto :goto_0

    .line 338
    :catchall_0
    move-exception v0

    monitor-exit v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    throw v0
.end method

.method public setImageURL(Ljava/net/URL;)V
    .locals 12
    .param p1, "imageURL"    # Ljava/net/URL;
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Ljava/lang/NullPointerException;,
            Ljava/io/IOException;,
            Ljava/lang/IllegalStateException;
        }
    .end annotation

    .prologue
    const/4 v9, 0x0

    .line 139
    invoke-direct {p0}, Lae/java/awt/SplashScreen;->checkVisible()V

    .line 140
    invoke-virtual {p1}, Ljava/net/URL;->openConnection()Ljava/net/URLConnection;

    move-result-object v2

    .line 141
    .local v2, "connection":Ljava/net/URLConnection;
    invoke-virtual {v2}, Ljava/net/URLConnection;->connect()V

    .line 142
    invoke-virtual {v2}, Ljava/net/URLConnection;->getContentLength()I

    move-result v3

    .line 143
    .local v3, "length":I
    invoke-virtual {v2}, Ljava/net/URLConnection;->getInputStream()Ljava/io/InputStream;

    move-result-object v7

    .line 144
    .local v7, "stream":Ljava/io/InputStream;
    new-array v1, v3, [B

    .line 145
    .local v1, "buf":[B
    const/4 v4, 0x0

    .line 148
    .local v4, "off":I
    :goto_0
    invoke-virtual {v7}, Ljava/io/InputStream;->available()I

    move-result v0

    .line 149
    .local v0, "available":I
    if-gtz v0, :cond_0

    .line 152
    const/4 v0, 0x1

    .line 156
    :cond_0
    add-int v8, v4, v0

    if-le v8, v3, :cond_2

    .line 157
    mul-int/lit8 v3, v4, 0x2

    .line 158
    add-int v8, v4, v0

    if-le v8, v3, :cond_1

    .line 159
    add-int v3, v0, v4

    .line 161
    :cond_1
    move-object v5, v1

    .line 162
    .local v5, "oldBuf":[B
    new-array v1, v3, [B

    .line 163
    invoke-static {v5, v9, v1, v9, v4}, Ljava/lang/System;->arraycopy(Ljava/lang/Object;ILjava/lang/Object;II)V

    .line 166
    .end local v5    # "oldBuf":[B
    :cond_2
    invoke-virtual {v7, v1, v4, v0}, Ljava/io/InputStream;->read([BII)I

    move-result v6

    .line 167
    .local v6, "result":I
    if-gez v6, :cond_3

    .line 172
    const-class v9, Lae/java/awt/SplashScreen;

    monitor-enter v9

    .line 173
    :try_start_0
    invoke-direct {p0}, Lae/java/awt/SplashScreen;->checkVisible()V

    .line 174
    iget-wide v10, p0, Lae/java/awt/SplashScreen;->splashPtr:J

    invoke-static {v10, v11, v1}, Lae/java/awt/SplashScreen;->_setImageData(J[B)Z

    move-result v8

    if-nez v8, :cond_4

    .line 175
    new-instance v8, Ljava/io/IOException;

    const-string v10, "Bad image format or i/o error when loading image"

    invoke-direct {v8, v10}, Ljava/io/IOException;-><init>(Ljava/lang/String;)V

    throw v8

    .line 172
    :catchall_0
    move-exception v8

    monitor-exit v9
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    throw v8

    .line 170
    :cond_3
    add-int/2addr v4, v6

    .line 146
    goto :goto_0

    .line 177
    :cond_4
    :try_start_1
    iput-object p1, p0, Lae/java/awt/SplashScreen;->imageURL:Ljava/net/URL;

    .line 172
    monitor-exit v9
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    .line 179
    return-void
.end method

.method public update()V
    .locals 14
    .annotation system Ldalvik/annotation/Throws;
        value = {
            Ljava/lang/IllegalStateException;
        }
    .end annotation

    .prologue
    .line 282
    const-class v1, Lae/java/awt/SplashScreen;

    monitor-enter v1

    .line 283
    :try_start_0
    invoke-direct {p0}, Lae/java/awt/SplashScreen;->checkVisible()V

    .line 284
    iget-object v9, p0, Lae/java/awt/SplashScreen;->image:Lae/java/awt/image/BufferedImage;

    .line 282
    .local v9, "image":Lae/java/awt/image/BufferedImage;
    monitor-exit v1
    :try_end_0
    .catchall {:try_start_0 .. :try_end_0} :catchall_0

    .line 286
    if-nez v9, :cond_0

    .line 287
    new-instance v0, Ljava/lang/IllegalStateException;

    const-string v1, "no overlay image available"

    invoke-direct {v0, v1}, Ljava/lang/IllegalStateException;-><init>(Ljava/lang/String;)V

    throw v0

    .line 282
    .end local v9    # "image":Lae/java/awt/image/BufferedImage;
    :catchall_0
    move-exception v0

    :try_start_1
    monitor-exit v1
    :try_end_1
    .catchall {:try_start_1 .. :try_end_1} :catchall_0

    throw v0

    .line 289
    .restart local v9    # "image":Lae/java/awt/image/BufferedImage;
    :cond_0
    invoke-virtual {v9}, Lae/java/awt/image/BufferedImage;->getRaster()Lae/java/awt/image/WritableRaster;

    move-result-object v0

    invoke-virtual {v0}, Lae/java/awt/image/WritableRaster;->getDataBuffer()Lae/java/awt/image/DataBuffer;

    move-result-object v8

    .line 290
    .local v8, "buf":Lae/java/awt/image/DataBuffer;
    instance-of v0, v8, Lae/java/awt/image/DataBufferInt;

    if-nez v0, :cond_1

    .line 291
    new-instance v0, Ljava/lang/AssertionError;

    new-instance v1, Ljava/lang/StringBuilder;

    const-string v3, "Overlay image DataBuffer is of invalid type == "

    invoke-direct {v1, v3}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-virtual {v8}, Ljava/lang/Object;->getClass()Ljava/lang/Class;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/Class;->getName()Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v1, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-direct {v0, v1}, Ljava/lang/AssertionError;-><init>(Ljava/lang/Object;)V

    throw v0

    .line 293
    :cond_1
    invoke-virtual {v8}, Lae/java/awt/image/DataBuffer;->getNumBanks()I

    move-result v10

    .line 294
    .local v10, "numBanks":I
    const/4 v0, 0x1

    if-eq v10, v0, :cond_2

    .line 295
    new-instance v0, Ljava/lang/AssertionError;

    new-instance v1, Ljava/lang/StringBuilder;

    const-string v3, "Invalid number of banks =="

    invoke-direct {v1, v3}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-virtual {v1, v10}, Ljava/lang/StringBuilder;->append(I)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v3, " in overlay image DataBuffer"

    invoke-virtual {v1, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-direct {v0, v1}, Ljava/lang/AssertionError;-><init>(Ljava/lang/Object;)V

    throw v0

    .line 297
    :cond_2
    invoke-virtual {v9}, Lae/java/awt/image/BufferedImage;->getSampleModel()Lae/java/awt/image/SampleModel;

    move-result-object v0

    instance-of v0, v0, Lae/java/awt/image/SinglePixelPackedSampleModel;

    if-nez v0, :cond_3

    .line 298
    new-instance v0, Ljava/lang/AssertionError;

    new-instance v1, Ljava/lang/StringBuilder;

    const-string v3, "Overlay image has invalid sample model == "

    invoke-direct {v1, v3}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-virtual {v9}, Lae/java/awt/image/BufferedImage;->getSampleModel()Lae/java/awt/image/SampleModel;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/Object;->getClass()Ljava/lang/Class;

    move-result-object v3

    invoke-virtual {v3}, Ljava/lang/Class;->getName()Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v1, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-direct {v0, v1}, Ljava/lang/AssertionError;-><init>(Ljava/lang/Object;)V

    throw v0

    .line 300
    :cond_3
    invoke-virtual {v9}, Lae/java/awt/image/BufferedImage;->getSampleModel()Lae/java/awt/image/SampleModel;

    move-result-object v12

    check-cast v12, Lae/java/awt/image/SinglePixelPackedSampleModel;

    .line 301
    .local v12, "sm":Lae/java/awt/image/SinglePixelPackedSampleModel;
    invoke-virtual {v12}, Lae/java/awt/image/SinglePixelPackedSampleModel;->getScanlineStride()I

    move-result v7

    .line 302
    .local v7, "scanlineStride":I
    invoke-virtual {v9}, Lae/java/awt/image/BufferedImage;->getRaster()Lae/java/awt/image/WritableRaster;

    move-result-object v0

    invoke-virtual {v0}, Lae/java/awt/image/WritableRaster;->getBounds()Lae/java/awt/Rectangle;

    move-result-object v11

    .line 305
    .local v11, "rect":Lae/java/awt/Rectangle;
    check-cast v8, Lae/java/awt/image/DataBufferInt;

    .end local v8    # "buf":Lae/java/awt/image/DataBuffer;
    const/4 v0, 0x0

    invoke-static {v8, v0}, Lae/sun/awt/image/SunWritableRaster;->stealData(Lae/java/awt/image/DataBufferInt;I)[I

    move-result-object v2

    .line 306
    .local v2, "data":[I
    const-class v13, Lae/java/awt/SplashScreen;

    monitor-enter v13

    .line 307
    :try_start_2
    invoke-direct {p0}, Lae/java/awt/SplashScreen;->checkVisible()V

    .line 308
    iget-wide v0, p0, Lae/java/awt/SplashScreen;->splashPtr:J

    iget v3, v11, Lae/java/awt/Rectangle;->x:I

    iget v4, v11, Lae/java/awt/Rectangle;->y:I

    iget v5, v11, Lae/java/awt/Rectangle;->width:I

    iget v6, v11, Lae/java/awt/Rectangle;->height:I

    invoke-static/range {v0 .. v7}, Lae/java/awt/SplashScreen;->_update(J[IIIIII)V

    .line 306
    monitor-exit v13

    .line 310
    return-void

    .line 306
    :catchall_1
    move-exception v0

    monitor-exit v13
    :try_end_2
    .catchall {:try_start_2 .. :try_end_2} :catchall_1

    throw v0
.end method
