.class final Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;
.super Ljava/lang/Object;


# static fields
.field private static final DECODING_TABLE:[B

.field private static final ENCODING_TABLE:[B

.field private static final INPUT_BYTES_PER_CHUNK:I = 0x4

.field private static final INVALID_BYTE:I = -0x1

.field private static final MASK_BYTE_UNSIGNED:I = 0xff

.field private static final PADDING:B = 0x3dt

.field private static final PAD_BYTE:I = -0x2


# direct methods
.method static constructor <clinit>()V
    .locals 4

    const/4 v1, 0x0

    const/16 v0, 0x40

    new-array v0, v0, [B

    fill-array-data v0, :array_0

    sput-object v0, Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;->ENCODING_TABLE:[B

    const/16 v0, 0x100

    new-array v0, v0, [B

    sput-object v0, Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;->DECODING_TABLE:[B

    move v0, v1

    :goto_0
    sget-object v2, Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;->DECODING_TABLE:[B

    array-length v2, v2

    if-lt v0, v2, :cond_0

    :goto_1
    sget-object v0, Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;->ENCODING_TABLE:[B

    array-length v0, v0

    if-lt v1, v0, :cond_1

    sget-object v0, Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;->DECODING_TABLE:[B

    const/16 v1, 0x3d

    const/4 v2, -0x2

    aput-byte v2, v0, v1

    return-void

    :cond_0
    sget-object v2, Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;->DECODING_TABLE:[B

    const/4 v3, -0x1

    aput-byte v3, v2, v0

    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    :cond_1
    sget-object v0, Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;->DECODING_TABLE:[B

    sget-object v2, Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;->ENCODING_TABLE:[B

    aget-byte v2, v2, v1

    int-to-byte v3, v1

    aput-byte v3, v0, v2

    add-int/lit8 v1, v1, 0x1

    goto :goto_1

    nop

    :array_0
    .array-data 1
        0x41t
        0x42t
        0x43t
        0x44t
        0x45t
        0x46t
        0x47t
        0x48t
        0x49t
        0x4at
        0x4bt
        0x4ct
        0x4dt
        0x4et
        0x4ft
        0x50t
        0x51t
        0x52t
        0x53t
        0x54t
        0x55t
        0x56t
        0x57t
        0x58t
        0x59t
        0x5at
        0x61t
        0x62t
        0x63t
        0x64t
        0x65t
        0x66t
        0x67t
        0x68t
        0x69t
        0x6at
        0x6bt
        0x6ct
        0x6dt
        0x6et
        0x6ft
        0x70t
        0x71t
        0x72t
        0x73t
        0x74t
        0x75t
        0x76t
        0x77t
        0x78t
        0x79t
        0x7at
        0x30t
        0x31t
        0x32t
        0x33t
        0x34t
        0x35t
        0x36t
        0x37t
        0x38t
        0x39t
        0x2bt
        0x2ft
    .end array-data
.end method

.method private constructor <init>()V
    .locals 0

    invoke-direct {p0}, Ljava/lang/Object;-><init>()V

    return-void
.end method

.method public static decode([BLjava/io/OutputStream;)I
    .locals 12

    const/4 v11, 0x4

    const/4 v1, 0x0

    const/4 v10, -0x2

    new-array v5, v11, [B

    array-length v6, p0

    move v4, v1

    move v0, v1

    move v3, v1

    :goto_0
    if-lt v4, v6, :cond_0

    if-eqz v0, :cond_6

    new-instance v0, Ljava/io/IOException;

    const-string v1, "Invalid Base64 input: truncated"

    invoke-direct {v0, v1}, Ljava/io/IOException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_0
    aget-byte v2, p0, v4

    sget-object v7, Lcom/ilegendsoft/mercury/external/fileupload/util/mime/Base64Decoder;->DECODING_TABLE:[B

    and-int/lit16 v2, v2, 0xff

    aget-byte v7, v7, v2

    const/4 v2, -0x1

    if-ne v7, v2, :cond_1

    move v2, v3

    :goto_1
    add-int/lit8 v3, v4, 0x1

    move v4, v3

    move v3, v2

    goto :goto_0

    :cond_1
    add-int/lit8 v2, v0, 0x1

    aput-byte v7, v5, v0

    if-ne v2, v11, :cond_7

    aget-byte v0, v5, v1

    const/4 v2, 0x1

    aget-byte v2, v5, v2

    const/4 v7, 0x2

    aget-byte v7, v5, v7

    const/4 v8, 0x3

    aget-byte v8, v5, v8

    if-eq v0, v10, :cond_2

    if-ne v2, v10, :cond_3

    :cond_2
    new-instance v0, Ljava/io/IOException;

    const-string v1, "Invalid Base64 input: incorrect padding, first two bytes cannot be padding"

    invoke-direct {v0, v1}, Ljava/io/IOException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_3
    shl-int/lit8 v0, v0, 0x2

    shr-int/lit8 v9, v2, 0x4

    or-int/2addr v0, v9

    invoke-virtual {p1, v0}, Ljava/io/OutputStream;->write(I)V

    add-int/lit8 v0, v3, 0x1

    if-eq v7, v10, :cond_5

    shl-int/lit8 v2, v2, 0x4

    shr-int/lit8 v3, v7, 0x2

    or-int/2addr v2, v3

    invoke-virtual {p1, v2}, Ljava/io/OutputStream;->write(I)V

    add-int/lit8 v0, v0, 0x1

    if-eq v8, v10, :cond_4

    shl-int/lit8 v2, v7, 0x6

    or-int/2addr v2, v8

    invoke-virtual {p1, v2}, Ljava/io/OutputStream;->write(I)V

    add-int/lit8 v0, v0, 0x1

    :cond_4
    move v2, v0

    move v0, v1

    goto :goto_1

    :cond_5
    if-eq v8, v10, :cond_4

    new-instance v0, Ljava/io/IOException;

    const-string v1, "Invalid Base64 input: incorrect padding, 4th byte must be padding if 3rd byte is"

    invoke-direct {v0, v1}, Ljava/io/IOException;-><init>(Ljava/lang/String;)V

    throw v0

    :cond_6
    return v3

    :cond_7
    move v0, v2

    move v2, v3

    goto :goto_1
.end method
