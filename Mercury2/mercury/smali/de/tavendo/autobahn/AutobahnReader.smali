.class public Lde/tavendo/autobahn/AutobahnReader;
.super Lde/tavendo/autobahn/WebSocketReader;


# static fields
.field private static final DEBUG:Z = true

.field private static final TAG:Ljava/lang/String;


# instance fields
.field private final mCalls:Ljava/util/concurrent/ConcurrentHashMap;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/concurrent/ConcurrentHashMap",
            "<",
            "Ljava/lang/String;",
            "Lde/tavendo/autobahn/AutobahnConnection$CallMeta;",
            ">;"
        }
    .end annotation
.end field

.field private final mJsonFactory:Lorg/codehaus/jackson/JsonFactory;

.field private final mJsonMapper:Lorg/codehaus/jackson/map/ObjectMapper;

.field private final mSubs:Ljava/util/concurrent/ConcurrentHashMap;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/concurrent/ConcurrentHashMap",
            "<",
            "Ljava/lang/String;",
            "Lde/tavendo/autobahn/AutobahnConnection$SubMeta;",
            ">;"
        }
    .end annotation
.end field


# direct methods
.method static constructor <clinit>()V
    .locals 1

    const-class v0, Lde/tavendo/autobahn/AutobahnReader;

    invoke-virtual {v0}, Ljava/lang/Class;->getName()Ljava/lang/String;

    move-result-object v0

    sput-object v0, Lde/tavendo/autobahn/AutobahnReader;->TAG:Ljava/lang/String;

    return-void
.end method

.method public constructor <init>(Ljava/util/concurrent/ConcurrentHashMap;Ljava/util/concurrent/ConcurrentHashMap;Landroid/os/Handler;Ljava/nio/channels/SocketChannel;Lde/tavendo/autobahn/WebSocketOptions;Ljava/lang/String;)V
    .locals 3
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/util/concurrent/ConcurrentHashMap",
            "<",
            "Ljava/lang/String;",
            "Lde/tavendo/autobahn/AutobahnConnection$CallMeta;",
            ">;",
            "Ljava/util/concurrent/ConcurrentHashMap",
            "<",
            "Ljava/lang/String;",
            "Lde/tavendo/autobahn/AutobahnConnection$SubMeta;",
            ">;",
            "Landroid/os/Handler;",
            "Ljava/nio/channels/SocketChannel;",
            "Lde/tavendo/autobahn/WebSocketOptions;",
            "Ljava/lang/String;",
            ")V"
        }
    .end annotation

    invoke-direct {p0, p3, p4, p5, p6}, Lde/tavendo/autobahn/WebSocketReader;-><init>(Landroid/os/Handler;Ljava/nio/channels/SocketChannel;Lde/tavendo/autobahn/WebSocketOptions;Ljava/lang/String;)V

    iput-object p1, p0, Lde/tavendo/autobahn/AutobahnReader;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    iput-object p2, p0, Lde/tavendo/autobahn/AutobahnReader;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    new-instance v0, Lorg/codehaus/jackson/map/ObjectMapper;

    invoke-direct {v0}, Lorg/codehaus/jackson/map/ObjectMapper;-><init>()V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnReader;->mJsonMapper:Lorg/codehaus/jackson/map/ObjectMapper;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnReader;->mJsonMapper:Lorg/codehaus/jackson/map/ObjectMapper;

    sget-object v1, Lorg/codehaus/jackson/map/DeserializationConfig$Feature;->FAIL_ON_UNKNOWN_PROPERTIES:Lorg/codehaus/jackson/map/DeserializationConfig$Feature;

    const/4 v2, 0x0

    invoke-virtual {v0, v1, v2}, Lorg/codehaus/jackson/map/ObjectMapper;->configure(Lorg/codehaus/jackson/map/DeserializationConfig$Feature;Z)Lorg/codehaus/jackson/map/ObjectMapper;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnReader;->mJsonMapper:Lorg/codehaus/jackson/map/ObjectMapper;

    invoke-virtual {v0}, Lorg/codehaus/jackson/map/ObjectMapper;->getJsonFactory()Lorg/codehaus/jackson/JsonFactory;

    move-result-object v0

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnReader;->mJsonFactory:Lorg/codehaus/jackson/JsonFactory;

    sget-object v0, Lde/tavendo/autobahn/AutobahnReader;->TAG:Ljava/lang/String;

    const-string v1, "created"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    return-void
.end method


# virtual methods
.method protected onBinaryMessage([B)V
    .locals 3

    new-instance v0, Lde/tavendo/autobahn/WebSocketMessage$Error;

    new-instance v1, Lde/tavendo/autobahn/WebSocketException;

    const-string v2, "received binary message"

    invoke-direct {v1, v2}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketMessage$Error;-><init>(Ljava/lang/Exception;)V

    invoke-virtual {p0, v0}, Lde/tavendo/autobahn/AutobahnReader;->notify(Ljava/lang/Object;)V

    return-void
.end method

.method protected onRawTextMessage([B)V
    .locals 5

    const/4 v1, 0x0

    :try_start_0
    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnReader;->mJsonFactory:Lorg/codehaus/jackson/JsonFactory;

    invoke-virtual {v0, p1}, Lorg/codehaus/jackson/JsonFactory;->createJsonParser([B)Lorg/codehaus/jackson/JsonParser;

    move-result-object v2

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    move-result-object v0

    sget-object v3, Lorg/codehaus/jackson/JsonToken;->START_ARRAY:Lorg/codehaus/jackson/JsonToken;

    if-ne v0, v3, :cond_d

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    move-result-object v0

    sget-object v3, Lorg/codehaus/jackson/JsonToken;->VALUE_NUMBER_INT:Lorg/codehaus/jackson/JsonToken;

    if-ne v0, v3, :cond_c

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->getIntValue()I

    move-result v0

    const/4 v3, 0x3

    if-ne v0, v3, :cond_4

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->getText()Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnReader;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v0, v3}, Ljava/util/concurrent/ConcurrentHashMap;->containsKey(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_3

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnReader;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v0, v3}, Ljava/util/concurrent/ConcurrentHashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;

    iget-object v4, v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;->mResultClass:Ljava/lang/Class;

    if-eqz v4, :cond_2

    iget-object v0, v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;->mResultClass:Ljava/lang/Class;

    invoke-virtual {v2, v0}, Lorg/codehaus/jackson/JsonParser;->readValueAs(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v1

    :cond_0
    :goto_0
    new-instance v0, Lde/tavendo/autobahn/AutobahnMessage$CallResult;

    invoke-direct {v0, v3, v1}, Lde/tavendo/autobahn/AutobahnMessage$CallResult;-><init>(Ljava/lang/String;Ljava/lang/Object;)V

    invoke-virtual {p0, v0}, Lde/tavendo/autobahn/AutobahnReader;->notify(Ljava/lang/Object;)V

    :goto_1
    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    move-result-object v0

    sget-object v1, Lorg/codehaus/jackson/JsonToken;->END_ARRAY:Lorg/codehaus/jackson/JsonToken;

    if-eq v0, v1, :cond_1

    sget-object v0, Lde/tavendo/autobahn/AutobahnReader;->TAG:Ljava/lang/String;

    const-string v1, "invalid WAMP message: missing array close or invalid additional args"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    :cond_1
    :goto_2
    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->close()V

    :goto_3
    return-void

    :cond_2
    iget-object v4, v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;->mResultTypeRef:Lorg/codehaus/jackson/type/TypeReference;

    if-eqz v4, :cond_0

    iget-object v0, v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;->mResultTypeRef:Lorg/codehaus/jackson/type/TypeReference;

    invoke-virtual {v2, v0}, Lorg/codehaus/jackson/JsonParser;->readValueAs(Lorg/codehaus/jackson/type/TypeReference;)Ljava/lang/Object;

    move-result-object v1

    goto :goto_0

    :cond_3
    sget-object v0, Lde/tavendo/autobahn/AutobahnReader;->TAG:Ljava/lang/String;

    const-string v1, "WAMP RPC success return for unknown call ID received"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_0
    .catch Lorg/codehaus/jackson/JsonParseException; {:try_start_0 .. :try_end_0} :catch_0
    .catch Ljava/io/IOException; {:try_start_0 .. :try_end_0} :catch_1

    goto :goto_1

    :catch_0
    move-exception v0

    invoke-virtual {v0}, Lorg/codehaus/jackson/JsonParseException;->printStackTrace()V

    goto :goto_3

    :cond_4
    const/4 v3, 0x4

    if-ne v0, v3, :cond_6

    :try_start_1
    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->getText()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->getText()Ljava/lang/String;

    move-result-object v1

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->getText()Ljava/lang/String;

    move-result-object v3

    iget-object v4, p0, Lde/tavendo/autobahn/AutobahnReader;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v4, v0}, Ljava/util/concurrent/ConcurrentHashMap;->containsKey(Ljava/lang/Object;)Z

    move-result v4

    if-eqz v4, :cond_5

    new-instance v4, Lde/tavendo/autobahn/AutobahnMessage$CallError;

    invoke-direct {v4, v0, v1, v3}, Lde/tavendo/autobahn/AutobahnMessage$CallError;-><init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V

    invoke-virtual {p0, v4}, Lde/tavendo/autobahn/AutobahnReader;->notify(Ljava/lang/Object;)V
    :try_end_1
    .catch Lorg/codehaus/jackson/JsonParseException; {:try_start_1 .. :try_end_1} :catch_0
    .catch Ljava/io/IOException; {:try_start_1 .. :try_end_1} :catch_1

    goto :goto_1

    :catch_1
    move-exception v0

    invoke-virtual {v0}, Ljava/io/IOException;->printStackTrace()V

    goto :goto_3

    :cond_5
    :try_start_2
    sget-object v0, Lde/tavendo/autobahn/AutobahnReader;->TAG:Ljava/lang/String;

    const-string v1, "WAMP RPC error return for unknown call ID received"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_1

    :cond_6
    const/16 v3, 0x8

    if-ne v0, v3, :cond_9

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->getText()Ljava/lang/String;

    move-result-object v3

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnReader;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v0, v3}, Ljava/util/concurrent/ConcurrentHashMap;->containsKey(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_8

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnReader;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v0, v3}, Ljava/util/concurrent/ConcurrentHashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;

    iget-object v4, v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;->mEventClass:Ljava/lang/Class;

    if-eqz v4, :cond_7

    iget-object v0, v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;->mEventClass:Ljava/lang/Class;

    invoke-virtual {v2, v0}, Lorg/codehaus/jackson/JsonParser;->readValueAs(Ljava/lang/Class;)Ljava/lang/Object;

    move-result-object v0

    :goto_4
    new-instance v1, Lde/tavendo/autobahn/AutobahnMessage$Event;

    invoke-direct {v1, v3, v0}, Lde/tavendo/autobahn/AutobahnMessage$Event;-><init>(Ljava/lang/String;Ljava/lang/Object;)V

    invoke-virtual {p0, v1}, Lde/tavendo/autobahn/AutobahnReader;->notify(Ljava/lang/Object;)V

    goto/16 :goto_1

    :cond_7
    iget-object v4, v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;->mEventTypeRef:Lorg/codehaus/jackson/type/TypeReference;

    if-eqz v4, :cond_e

    iget-object v0, v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;->mEventTypeRef:Lorg/codehaus/jackson/type/TypeReference;

    invoke-virtual {v2, v0}, Lorg/codehaus/jackson/JsonParser;->readValueAs(Lorg/codehaus/jackson/type/TypeReference;)Ljava/lang/Object;

    move-result-object v0

    goto :goto_4

    :cond_8
    sget-object v0, Lde/tavendo/autobahn/AutobahnReader;->TAG:Ljava/lang/String;

    const-string v1, "WAMP event for not-subscribed topic received"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_1

    :cond_9
    const/4 v1, 0x1

    if-ne v0, v1, :cond_a

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->getText()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->getText()Ljava/lang/String;

    move-result-object v1

    new-instance v3, Lde/tavendo/autobahn/AutobahnMessage$Prefix;

    invoke-direct {v3, v0, v1}, Lde/tavendo/autobahn/AutobahnMessage$Prefix;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    invoke-virtual {p0, v3}, Lde/tavendo/autobahn/AutobahnReader;->notify(Ljava/lang/Object;)V

    goto/16 :goto_1

    :cond_a
    if-nez v0, :cond_b

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->nextToken()Lorg/codehaus/jackson/JsonToken;

    invoke-virtual {v2}, Lorg/codehaus/jackson/JsonParser;->getText()Ljava/lang/String;

    move-result-object v0

    new-instance v1, Lde/tavendo/autobahn/AutobahnMessage$Welcome;

    invoke-direct {v1, v0}, Lde/tavendo/autobahn/AutobahnMessage$Welcome;-><init>(Ljava/lang/String;)V

    invoke-virtual {p0, v1}, Lde/tavendo/autobahn/AutobahnReader;->notify(Ljava/lang/Object;)V

    goto/16 :goto_1

    :cond_b
    sget-object v0, Lde/tavendo/autobahn/AutobahnReader;->TAG:Ljava/lang/String;

    const-string v1, "invalid WAMP message: unrecognized message type"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_1

    :cond_c
    sget-object v0, Lde/tavendo/autobahn/AutobahnReader;->TAG:Ljava/lang/String;

    const-string v1, "invalid WAMP message: missing message type or message type not an integer"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_1

    :cond_d
    sget-object v0, Lde/tavendo/autobahn/AutobahnReader;->TAG:Ljava/lang/String;

    const-string v1, "invalid WAMP message: not an array"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I
    :try_end_2
    .catch Lorg/codehaus/jackson/JsonParseException; {:try_start_2 .. :try_end_2} :catch_0
    .catch Ljava/io/IOException; {:try_start_2 .. :try_end_2} :catch_1

    goto/16 :goto_2

    :cond_e
    move-object v0, v1

    goto :goto_4
.end method

.method protected onTextMessage(Ljava/lang/String;)V
    .locals 3

    new-instance v0, Lde/tavendo/autobahn/WebSocketMessage$Error;

    new-instance v1, Lde/tavendo/autobahn/WebSocketException;

    const-string v2, "non-raw receive of text message"

    invoke-direct {v1, v2}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketMessage$Error;-><init>(Ljava/lang/Exception;)V

    invoke-virtual {p0, v0}, Lde/tavendo/autobahn/AutobahnReader;->notify(Ljava/lang/Object;)V

    return-void
.end method
