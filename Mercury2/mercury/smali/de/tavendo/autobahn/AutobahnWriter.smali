.class public Lde/tavendo/autobahn/AutobahnWriter;
.super Lde/tavendo/autobahn/WebSocketWriter;


# static fields
.field private static final DEBUG:Z = true

.field private static final TAG:Ljava/lang/String;


# instance fields
.field private final mJsonFactory:Lorg/codehaus/jackson/JsonFactory;

.field private final mPayload:Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;


# direct methods
.method static constructor <clinit>()V
    .locals 1

    const-class v0, Lde/tavendo/autobahn/AutobahnWriter;

    invoke-virtual {v0}, Ljava/lang/Class;->getName()Ljava/lang/String;

    move-result-object v0

    sput-object v0, Lde/tavendo/autobahn/AutobahnWriter;->TAG:Ljava/lang/String;

    return-void
.end method

.method public constructor <init>(Landroid/os/Looper;Landroid/os/Handler;Ljava/nio/channels/SocketChannel;Lde/tavendo/autobahn/WebSocketOptions;)V
    .locals 2

    invoke-direct {p0, p1, p2, p3, p4}, Lde/tavendo/autobahn/WebSocketWriter;-><init>(Landroid/os/Looper;Landroid/os/Handler;Ljava/nio/channels/SocketChannel;Lde/tavendo/autobahn/WebSocketOptions;)V

    new-instance v0, Lorg/codehaus/jackson/map/MappingJsonFactory;

    invoke-direct {v0}, Lorg/codehaus/jackson/map/MappingJsonFactory;-><init>()V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnWriter;->mJsonFactory:Lorg/codehaus/jackson/JsonFactory;

    new-instance v0, Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;

    invoke-direct {v0}, Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;-><init>()V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnWriter;->mPayload:Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;

    sget-object v0, Lde/tavendo/autobahn/AutobahnWriter;->TAG:Ljava/lang/String;

    const-string v1, "created"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    return-void
.end method


# virtual methods
.method protected processAppMessage(Ljava/lang/Object;)V
    .locals 7

    const/4 v4, 0x0

    const/4 v1, 0x1

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnWriter;->mPayload:Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;->reset()V

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnWriter;->mJsonFactory:Lorg/codehaus/jackson/JsonFactory;

    iget-object v2, p0, Lde/tavendo/autobahn/AutobahnWriter;->mPayload:Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;

    invoke-virtual {v0, v2}, Lorg/codehaus/jackson/JsonFactory;->createJsonGenerator(Ljava/io/OutputStream;)Lorg/codehaus/jackson/JsonGenerator;

    move-result-object v6

    :try_start_0
    instance-of v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Call;

    if-eqz v0, :cond_1

    check-cast p1, Lde/tavendo/autobahn/AutobahnMessage$Call;

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeStartArray()V

    const/4 v0, 0x2

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeNumber(I)V

    iget-object v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Call;->mCallId:Ljava/lang/String;

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeString(Ljava/lang/String;)V

    iget-object v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Call;->mProcUri:Ljava/lang/String;

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeString(Ljava/lang/String;)V

    iget-object v2, p1, Lde/tavendo/autobahn/AutobahnMessage$Call;->mArgs:[Ljava/lang/Object;

    array-length v3, v2

    move v0, v4

    :goto_0
    if-lt v0, v3, :cond_0

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeEndArray()V
    :try_end_0
    .catch Lorg/codehaus/jackson/JsonGenerationException; {:try_start_0 .. :try_end_0} :catch_0
    .catch Lorg/codehaus/jackson/map/JsonMappingException; {:try_start_0 .. :try_end_0} :catch_1

    :goto_1
    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->flush()V

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnWriter;->mPayload:Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;->getByteArray()[B

    move-result-object v3

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnWriter;->mPayload:Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;

    invoke-virtual {v0}, Lde/tavendo/autobahn/NoCopyByteArrayOutputStream;->size()I

    move-result v5

    move-object v0, p0

    move v2, v1

    invoke-virtual/range {v0 .. v5}, Lde/tavendo/autobahn/AutobahnWriter;->sendFrame(IZ[BII)V

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->close()V

    return-void

    :cond_0
    :try_start_1
    aget-object v5, v2, v0

    invoke-virtual {v6, v5}, Lorg/codehaus/jackson/JsonGenerator;->writeObject(Ljava/lang/Object;)V

    add-int/lit8 v0, v0, 0x1

    goto :goto_0

    :cond_1
    instance-of v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Prefix;

    if-eqz v0, :cond_2

    check-cast p1, Lde/tavendo/autobahn/AutobahnMessage$Prefix;

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeStartArray()V

    const/4 v0, 0x1

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeNumber(I)V

    iget-object v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Prefix;->mPrefix:Ljava/lang/String;

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeString(Ljava/lang/String;)V

    iget-object v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Prefix;->mUri:Ljava/lang/String;

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeString(Ljava/lang/String;)V

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeEndArray()V
    :try_end_1
    .catch Lorg/codehaus/jackson/JsonGenerationException; {:try_start_1 .. :try_end_1} :catch_0
    .catch Lorg/codehaus/jackson/map/JsonMappingException; {:try_start_1 .. :try_end_1} :catch_1

    goto :goto_1

    :catch_0
    move-exception v0

    new-instance v1, Lde/tavendo/autobahn/WebSocketException;

    new-instance v2, Ljava/lang/StringBuilder;

    const-string v3, "JSON serialization error ("

    invoke-direct {v2, v3}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-virtual {v0}, Lorg/codehaus/jackson/JsonGenerationException;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    const-string v2, ")"

    invoke-virtual {v0, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-direct {v1, v0}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v1

    :cond_2
    :try_start_2
    instance-of v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Subscribe;

    if-eqz v0, :cond_3

    check-cast p1, Lde/tavendo/autobahn/AutobahnMessage$Subscribe;

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeStartArray()V

    const/4 v0, 0x5

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeNumber(I)V

    iget-object v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Subscribe;->mTopicUri:Ljava/lang/String;

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeString(Ljava/lang/String;)V

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeEndArray()V
    :try_end_2
    .catch Lorg/codehaus/jackson/JsonGenerationException; {:try_start_2 .. :try_end_2} :catch_0
    .catch Lorg/codehaus/jackson/map/JsonMappingException; {:try_start_2 .. :try_end_2} :catch_1

    goto :goto_1

    :catch_1
    move-exception v0

    new-instance v1, Lde/tavendo/autobahn/WebSocketException;

    new-instance v2, Ljava/lang/StringBuilder;

    const-string v3, "JSON serialization error ("

    invoke-direct {v2, v3}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-virtual {v0}, Lorg/codehaus/jackson/map/JsonMappingException;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v2, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    const-string v2, ")"

    invoke-virtual {v0, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-direct {v1, v0}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v1

    :cond_3
    :try_start_3
    instance-of v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Unsubscribe;

    if-eqz v0, :cond_4

    check-cast p1, Lde/tavendo/autobahn/AutobahnMessage$Unsubscribe;

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeStartArray()V

    const/4 v0, 0x6

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeNumber(I)V

    iget-object v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Unsubscribe;->mTopicUri:Ljava/lang/String;

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeString(Ljava/lang/String;)V

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeEndArray()V

    goto/16 :goto_1

    :cond_4
    instance-of v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Publish;

    if-eqz v0, :cond_5

    check-cast p1, Lde/tavendo/autobahn/AutobahnMessage$Publish;

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeStartArray()V

    const/4 v0, 0x7

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeNumber(I)V

    iget-object v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Publish;->mTopicUri:Ljava/lang/String;

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeString(Ljava/lang/String;)V

    iget-object v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Publish;->mEvent:Ljava/lang/Object;

    invoke-virtual {v6, v0}, Lorg/codehaus/jackson/JsonGenerator;->writeObject(Ljava/lang/Object;)V

    invoke-virtual {v6}, Lorg/codehaus/jackson/JsonGenerator;->writeEndArray()V

    goto/16 :goto_1

    :cond_5
    new-instance v0, Lde/tavendo/autobahn/WebSocketException;

    const-string v1, "invalid message received by AutobahnWriter"

    invoke-direct {v0, v1}, Lde/tavendo/autobahn/WebSocketException;-><init>(Ljava/lang/String;)V

    throw v0
    :try_end_3
    .catch Lorg/codehaus/jackson/JsonGenerationException; {:try_start_3 .. :try_end_3} :catch_0
    .catch Lorg/codehaus/jackson/map/JsonMappingException; {:try_start_3 .. :try_end_3} :catch_1
.end method
