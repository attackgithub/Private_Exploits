.class public Lde/tavendo/autobahn/AutobahnConnection;
.super Lde/tavendo/autobahn/WebSocketConnection;

# interfaces
.implements Lde/tavendo/autobahn/Autobahn;


# static fields
.field private static final DEBUG:Z = true

.field private static final TAG:Ljava/lang/String;

.field private static final mBase64Chars:[C


# instance fields
.field private final mCalls:Ljava/util/concurrent/ConcurrentHashMap;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/concurrent/ConcurrentHashMap",
            "<",
            "Ljava/lang/String;",
            "Lde/tavendo/autobahn/AutobahnConnection$CallMeta;",
            ">;"
        }
    .end annotation
.end field

.field private final mOutgoingPrefixes:Lde/tavendo/autobahn/PrefixMap;

.field private final mRng:Ljava/util/Random;

.field private mSessionHandler:Lde/tavendo/autobahn/Autobahn$SessionHandler;

.field private final mSubs:Ljava/util/concurrent/ConcurrentHashMap;
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "Ljava/util/concurrent/ConcurrentHashMap",
            "<",
            "Ljava/lang/String;",
            "Lde/tavendo/autobahn/AutobahnConnection$SubMeta;",
            ">;"
        }
    .end annotation
.end field

.field protected mWriterHandler:Lde/tavendo/autobahn/AutobahnWriter;


# direct methods
.method static constructor <clinit>()V
    .locals 1

    const-class v0, Lde/tavendo/autobahn/AutobahnConnection;

    invoke-virtual {v0}, Ljava/lang/Class;->getName()Ljava/lang/String;

    move-result-object v0

    sput-object v0, Lde/tavendo/autobahn/AutobahnConnection;->TAG:Ljava/lang/String;

    const-string v0, "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"

    invoke-virtual {v0}, Ljava/lang/String;->toCharArray()[C

    move-result-object v0

    sput-object v0, Lde/tavendo/autobahn/AutobahnConnection;->mBase64Chars:[C

    return-void
.end method

.method public constructor <init>()V
    .locals 1

    invoke-direct {p0}, Lde/tavendo/autobahn/WebSocketConnection;-><init>()V

    new-instance v0, Lde/tavendo/autobahn/PrefixMap;

    invoke-direct {v0}, Lde/tavendo/autobahn/PrefixMap;-><init>()V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mOutgoingPrefixes:Lde/tavendo/autobahn/PrefixMap;

    new-instance v0, Ljava/util/Random;

    invoke-direct {v0}, Ljava/util/Random;-><init>()V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mRng:Ljava/util/Random;

    new-instance v0, Ljava/util/concurrent/ConcurrentHashMap;

    invoke-direct {v0}, Ljava/util/concurrent/ConcurrentHashMap;-><init>()V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    new-instance v0, Ljava/util/concurrent/ConcurrentHashMap;

    invoke-direct {v0}, Ljava/util/concurrent/ConcurrentHashMap;-><init>()V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    return-void
.end method

.method static synthetic access$0(Lde/tavendo/autobahn/AutobahnConnection;)Lde/tavendo/autobahn/Autobahn$SessionHandler;
    .locals 1

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSessionHandler:Lde/tavendo/autobahn/Autobahn$SessionHandler;

    return-object v0
.end method

.method static synthetic access$1()Ljava/lang/String;
    .locals 1

    sget-object v0, Lde/tavendo/autobahn/AutobahnConnection;->TAG:Ljava/lang/String;

    return-object v0
.end method

.method private varargs call(Ljava/lang/String;Lde/tavendo/autobahn/AutobahnConnection$CallMeta;[Ljava/lang/Object;)V
    .locals 4

    new-instance v1, Lde/tavendo/autobahn/AutobahnMessage$Call;

    invoke-direct {p0}, Lde/tavendo/autobahn/AutobahnConnection;->newId()Ljava/lang/String;

    move-result-object v0

    array-length v2, p3

    invoke-direct {v1, v0, p1, v2}, Lde/tavendo/autobahn/AutobahnMessage$Call;-><init>(Ljava/lang/String;Ljava/lang/String;I)V

    const/4 v0, 0x0

    :goto_0
    array-length v2, p3

    if-lt v0, v2, :cond_0

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v1, v1, Lde/tavendo/autobahn/AutobahnMessage$Call;->mCallId:Ljava/lang/String;

    invoke-virtual {v0, v1, p2}, Ljava/util/concurrent/ConcurrentHashMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    return-void

    :cond_0
    iget-object v2, v1, Lde/tavendo/autobahn/AutobahnMessage$Call;->mArgs:[Ljava/lang/Object;

    aget-object v3, p3, v0

    aput-object v3, v2, v0

    add-int/lit8 v0, v0, 0x1

    goto :goto_0
.end method

.method private newId()Ljava/lang/String;
    .locals 1

    const/16 v0, 0x8

    invoke-direct {p0, v0}, Lde/tavendo/autobahn/AutobahnConnection;->newId(I)Ljava/lang/String;

    move-result-object v0

    return-object v0
.end method

.method private newId(I)Ljava/lang/String;
    .locals 5

    new-array v1, p1, [C

    const/4 v0, 0x0

    :goto_0
    if-lt v0, p1, :cond_0

    new-instance v0, Ljava/lang/String;

    invoke-direct {v0, v1}, Ljava/lang/String;-><init>([C)V

    return-object v0

    :cond_0
    sget-object v2, Lde/tavendo/autobahn/AutobahnConnection;->mBase64Chars:[C

    iget-object v3, p0, Lde/tavendo/autobahn/AutobahnConnection;->mRng:Ljava/util/Random;

    sget-object v4, Lde/tavendo/autobahn/AutobahnConnection;->mBase64Chars:[C

    array-length v4, v4

    invoke-virtual {v3, v4}, Ljava/util/Random;->nextInt(I)I

    move-result v3

    aget-char v2, v2, v3

    aput-char v2, v1, v0

    add-int/lit8 v0, v0, 0x1

    goto :goto_0
.end method

.method private subscribe(Ljava/lang/String;Lde/tavendo/autobahn/AutobahnConnection$SubMeta;)V
    .locals 3

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mOutgoingPrefixes:Lde/tavendo/autobahn/PrefixMap;

    invoke-virtual {v0, p1}, Lde/tavendo/autobahn/PrefixMap;->resolveOrPass(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v1, v0}, Ljava/util/concurrent/ConcurrentHashMap;->containsKey(Ljava/lang/Object;)Z

    move-result v1

    if-nez v1, :cond_0

    new-instance v1, Lde/tavendo/autobahn/AutobahnMessage$Subscribe;

    iget-object v2, p0, Lde/tavendo/autobahn/AutobahnConnection;->mOutgoingPrefixes:Lde/tavendo/autobahn/PrefixMap;

    invoke-virtual {v2, p1}, Lde/tavendo/autobahn/PrefixMap;->shrink(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v2

    invoke-direct {v1, v2}, Lde/tavendo/autobahn/AutobahnMessage$Subscribe;-><init>(Ljava/lang/String;)V

    iget-object v2, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    invoke-virtual {v2, v1}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    :cond_0
    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v1, v0, p2}, Ljava/util/concurrent/ConcurrentHashMap;->put(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;

    return-void
.end method


# virtual methods
.method public varargs call(Ljava/lang/String;Ljava/lang/Class;Lde/tavendo/autobahn/Autobahn$CallHandler;[Ljava/lang/Object;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/lang/String;",
            "Ljava/lang/Class",
            "<*>;",
            "Lde/tavendo/autobahn/Autobahn$CallHandler;",
            "[",
            "Ljava/lang/Object;",
            ")V"
        }
    .end annotation

    new-instance v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;

    invoke-direct {v0, p3, p2}, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;-><init>(Lde/tavendo/autobahn/Autobahn$CallHandler;Ljava/lang/Class;)V

    invoke-direct {p0, p1, v0, p4}, Lde/tavendo/autobahn/AutobahnConnection;->call(Ljava/lang/String;Lde/tavendo/autobahn/AutobahnConnection$CallMeta;[Ljava/lang/Object;)V

    return-void
.end method

.method public varargs call(Ljava/lang/String;Lorg/codehaus/jackson/type/TypeReference;Lde/tavendo/autobahn/Autobahn$CallHandler;[Ljava/lang/Object;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/lang/String;",
            "Lorg/codehaus/jackson/type/TypeReference",
            "<*>;",
            "Lde/tavendo/autobahn/Autobahn$CallHandler;",
            "[",
            "Ljava/lang/Object;",
            ")V"
        }
    .end annotation

    new-instance v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;

    invoke-direct {v0, p3, p2}, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;-><init>(Lde/tavendo/autobahn/Autobahn$CallHandler;Lorg/codehaus/jackson/type/TypeReference;)V

    invoke-direct {p0, p1, v0, p4}, Lde/tavendo/autobahn/AutobahnConnection;->call(Ljava/lang/String;Lde/tavendo/autobahn/AutobahnConnection$CallMeta;[Ljava/lang/Object;)V

    return-void
.end method

.method public connect(Ljava/lang/String;Lde/tavendo/autobahn/Autobahn$SessionHandler;)V
    .locals 3

    const/high16 v2, 0x10000

    const/4 v1, 0x1

    new-instance v0, Lde/tavendo/autobahn/AutobahnOptions;

    invoke-direct {v0}, Lde/tavendo/autobahn/AutobahnOptions;-><init>()V

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/AutobahnOptions;->setReceiveTextMessagesRaw(Z)V

    invoke-virtual {v0, v2}, Lde/tavendo/autobahn/AutobahnOptions;->setMaxMessagePayloadSize(I)V

    invoke-virtual {v0, v2}, Lde/tavendo/autobahn/AutobahnOptions;->setMaxFramePayloadSize(I)V

    invoke-virtual {v0, v1}, Lde/tavendo/autobahn/AutobahnOptions;->setTcpNoDelay(Z)V

    invoke-virtual {p0, p1, p2, v0}, Lde/tavendo/autobahn/AutobahnConnection;->connect(Ljava/lang/String;Lde/tavendo/autobahn/Autobahn$SessionHandler;Lde/tavendo/autobahn/AutobahnOptions;)V

    return-void
.end method

.method public connect(Ljava/lang/String;Lde/tavendo/autobahn/Autobahn$SessionHandler;Lde/tavendo/autobahn/AutobahnOptions;)V
    .locals 5

    iput-object p2, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSessionHandler:Lde/tavendo/autobahn/Autobahn$SessionHandler;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v0}, Ljava/util/concurrent/ConcurrentHashMap;->clear()V

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v0}, Ljava/util/concurrent/ConcurrentHashMap;->clear()V

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mOutgoingPrefixes:Lde/tavendo/autobahn/PrefixMap;

    invoke-virtual {v0}, Lde/tavendo/autobahn/PrefixMap;->clear()V

    const/4 v0, 0x1

    :try_start_0
    new-array v0, v0, [Ljava/lang/String;

    const/4 v1, 0x0

    const-string v2, "wamp"

    aput-object v2, v0, v1

    new-instance v1, Lde/tavendo/autobahn/AutobahnConnection$1;

    invoke-direct {v1, p0}, Lde/tavendo/autobahn/AutobahnConnection$1;-><init>(Lde/tavendo/autobahn/AutobahnConnection;)V

    invoke-virtual {p0, p1, v0, v1, p3}, Lde/tavendo/autobahn/AutobahnConnection;->connect(Ljava/lang/String;[Ljava/lang/String;Lde/tavendo/autobahn/WebSocketHandler;Lde/tavendo/autobahn/WebSocketOptions;)V
    :try_end_0
    .catch Lde/tavendo/autobahn/WebSocketException; {:try_start_0 .. :try_end_0} :catch_0

    :goto_0
    return-void

    :catch_0
    move-exception v0

    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSessionHandler:Lde/tavendo/autobahn/Autobahn$SessionHandler;

    if-eqz v1, :cond_0

    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSessionHandler:Lde/tavendo/autobahn/Autobahn$SessionHandler;

    const/4 v2, 0x2

    new-instance v3, Ljava/lang/StringBuilder;

    const-string v4, "cannot connect ("

    invoke-direct {v3, v4}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketException;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-virtual {v3, v0}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    const-string v3, ")"

    invoke-virtual {v0, v3}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v0

    invoke-virtual {v0}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v0

    invoke-interface {v1, v2, v0}, Lde/tavendo/autobahn/Autobahn$SessionHandler;->onClose(ILjava/lang/String;)V

    goto :goto_0

    :cond_0
    sget-object v0, Lde/tavendo/autobahn/AutobahnConnection;->TAG:Ljava/lang/String;

    const-string v1, "could not call onClose() .. handler already NULL"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0
.end method

.method protected createReader()V
    .locals 7

    new-instance v0, Lde/tavendo/autobahn/AutobahnReader;

    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v2, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v3, p0, Lde/tavendo/autobahn/AutobahnConnection;->mMasterHandler:Landroid/os/Handler;

    iget-object v4, p0, Lde/tavendo/autobahn/AutobahnConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    iget-object v5, p0, Lde/tavendo/autobahn/AutobahnConnection;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    const-string v6, "AutobahnReader"

    invoke-direct/range {v0 .. v6}, Lde/tavendo/autobahn/AutobahnReader;-><init>(Ljava/util/concurrent/ConcurrentHashMap;Ljava/util/concurrent/ConcurrentHashMap;Landroid/os/Handler;Ljava/nio/channels/SocketChannel;Lde/tavendo/autobahn/WebSocketOptions;Ljava/lang/String;)V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mReader:Lde/tavendo/autobahn/WebSocketReader;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mReader:Lde/tavendo/autobahn/WebSocketReader;

    invoke-virtual {v0}, Lde/tavendo/autobahn/WebSocketReader;->start()V

    sget-object v0, Lde/tavendo/autobahn/AutobahnConnection;->TAG:Ljava/lang/String;

    const-string v1, "reader created and started"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    return-void
.end method

.method protected createWriter()V
    .locals 5

    new-instance v0, Landroid/os/HandlerThread;

    const-string v1, "AutobahnWriter"

    invoke-direct {v0, v1}, Landroid/os/HandlerThread;-><init>(Ljava/lang/String;)V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriterThread:Landroid/os/HandlerThread;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriterThread:Landroid/os/HandlerThread;

    invoke-virtual {v0}, Landroid/os/HandlerThread;->start()V

    new-instance v0, Lde/tavendo/autobahn/AutobahnWriter;

    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriterThread:Landroid/os/HandlerThread;

    invoke-virtual {v1}, Landroid/os/HandlerThread;->getLooper()Landroid/os/Looper;

    move-result-object v1

    iget-object v2, p0, Lde/tavendo/autobahn/AutobahnConnection;->mMasterHandler:Landroid/os/Handler;

    iget-object v3, p0, Lde/tavendo/autobahn/AutobahnConnection;->mTransportChannel:Ljava/nio/channels/SocketChannel;

    iget-object v4, p0, Lde/tavendo/autobahn/AutobahnConnection;->mOptions:Lde/tavendo/autobahn/WebSocketOptions;

    invoke-direct {v0, v1, v2, v3, v4}, Lde/tavendo/autobahn/AutobahnWriter;-><init>(Landroid/os/Looper;Landroid/os/Handler;Ljava/nio/channels/SocketChannel;Lde/tavendo/autobahn/WebSocketOptions;)V

    iput-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    sget-object v0, Lde/tavendo/autobahn/AutobahnConnection;->TAG:Ljava/lang/String;

    const-string v1, "writer created and started"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    return-void
.end method

.method public prefix(Ljava/lang/String;Ljava/lang/String;)V
    .locals 2

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mOutgoingPrefixes:Lde/tavendo/autobahn/PrefixMap;

    invoke-virtual {v0, p1}, Lde/tavendo/autobahn/PrefixMap;->get(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v0

    if-eqz v0, :cond_0

    invoke-virtual {v0, p2}, Ljava/lang/String;->equals(Ljava/lang/Object;)Z

    move-result v0

    if-nez v0, :cond_1

    :cond_0
    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mOutgoingPrefixes:Lde/tavendo/autobahn/PrefixMap;

    invoke-virtual {v0, p1, p2}, Lde/tavendo/autobahn/PrefixMap;->set(Ljava/lang/String;Ljava/lang/String;)V

    new-instance v0, Lde/tavendo/autobahn/AutobahnMessage$Prefix;

    invoke-direct {v0, p1, p2}, Lde/tavendo/autobahn/AutobahnMessage$Prefix;-><init>(Ljava/lang/String;Ljava/lang/String;)V

    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    invoke-virtual {v1, v0}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    :cond_1
    return-void
.end method

.method protected processAppMessage(Ljava/lang/Object;)V
    .locals 3

    instance-of v0, p1, Lde/tavendo/autobahn/AutobahnMessage$CallResult;

    if-eqz v0, :cond_2

    check-cast p1, Lde/tavendo/autobahn/AutobahnMessage$CallResult;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$CallResult;->mCallId:Ljava/lang/String;

    invoke-virtual {v0, v1}, Ljava/util/concurrent/ConcurrentHashMap;->containsKey(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_1

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$CallResult;->mCallId:Ljava/lang/String;

    invoke-virtual {v0, v1}, Ljava/util/concurrent/ConcurrentHashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;

    iget-object v1, v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;->mResultHandler:Lde/tavendo/autobahn/Autobahn$CallHandler;

    if-eqz v1, :cond_0

    iget-object v0, v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;->mResultHandler:Lde/tavendo/autobahn/Autobahn$CallHandler;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$CallResult;->mResult:Ljava/lang/Object;

    invoke-interface {v0, v1}, Lde/tavendo/autobahn/Autobahn$CallHandler;->onResult(Ljava/lang/Object;)V

    :cond_0
    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$CallResult;->mCallId:Ljava/lang/String;

    invoke-virtual {v0, v1}, Ljava/util/concurrent/ConcurrentHashMap;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    :cond_1
    :goto_0
    return-void

    :cond_2
    instance-of v0, p1, Lde/tavendo/autobahn/AutobahnMessage$CallError;

    if-eqz v0, :cond_4

    check-cast p1, Lde/tavendo/autobahn/AutobahnMessage$CallError;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$CallError;->mCallId:Ljava/lang/String;

    invoke-virtual {v0, v1}, Ljava/util/concurrent/ConcurrentHashMap;->containsKey(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_1

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$CallError;->mCallId:Ljava/lang/String;

    invoke-virtual {v0, v1}, Ljava/util/concurrent/ConcurrentHashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;

    iget-object v1, v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;->mResultHandler:Lde/tavendo/autobahn/Autobahn$CallHandler;

    if-eqz v1, :cond_3

    iget-object v0, v0, Lde/tavendo/autobahn/AutobahnConnection$CallMeta;->mResultHandler:Lde/tavendo/autobahn/Autobahn$CallHandler;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$CallError;->mErrorUri:Ljava/lang/String;

    iget-object v2, p1, Lde/tavendo/autobahn/AutobahnMessage$CallError;->mErrorDesc:Ljava/lang/String;

    invoke-interface {v0, v1, v2}, Lde/tavendo/autobahn/Autobahn$CallHandler;->onError(Ljava/lang/String;Ljava/lang/String;)V

    :cond_3
    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mCalls:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$CallError;->mCallId:Ljava/lang/String;

    invoke-virtual {v0, v1}, Ljava/util/concurrent/ConcurrentHashMap;->remove(Ljava/lang/Object;)Ljava/lang/Object;

    goto :goto_0

    :cond_4
    instance-of v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Event;

    if-eqz v0, :cond_5

    check-cast p1, Lde/tavendo/autobahn/AutobahnMessage$Event;

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$Event;->mTopicUri:Ljava/lang/String;

    invoke-virtual {v0, v1}, Ljava/util/concurrent/ConcurrentHashMap;->containsKey(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_1

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$Event;->mTopicUri:Ljava/lang/String;

    invoke-virtual {v0, v1}, Ljava/util/concurrent/ConcurrentHashMap;->get(Ljava/lang/Object;)Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;

    if-eqz v0, :cond_1

    iget-object v1, v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;->mEventHandler:Lde/tavendo/autobahn/Autobahn$EventHandler;

    if-eqz v1, :cond_1

    iget-object v0, v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;->mEventHandler:Lde/tavendo/autobahn/Autobahn$EventHandler;

    iget-object v1, p1, Lde/tavendo/autobahn/AutobahnMessage$Event;->mTopicUri:Ljava/lang/String;

    iget-object v2, p1, Lde/tavendo/autobahn/AutobahnMessage$Event;->mEvent:Ljava/lang/Object;

    invoke-interface {v0, v1, v2}, Lde/tavendo/autobahn/Autobahn$EventHandler;->onEvent(Ljava/lang/String;Ljava/lang/Object;)V

    goto :goto_0

    :cond_5
    instance-of v0, p1, Lde/tavendo/autobahn/AutobahnMessage$Welcome;

    if-eqz v0, :cond_6

    check-cast p1, Lde/tavendo/autobahn/AutobahnMessage$Welcome;

    sget-object v0, Lde/tavendo/autobahn/AutobahnConnection;->TAG:Ljava/lang/String;

    new-instance v1, Ljava/lang/StringBuilder;

    const-string v2, "WAMP session "

    invoke-direct {v1, v2}, Ljava/lang/StringBuilder;-><init>(Ljava/lang/String;)V

    iget-object v2, p1, Lde/tavendo/autobahn/AutobahnMessage$Welcome;->mSessionId:Ljava/lang/String;

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    const-string v2, " established"

    invoke-virtual {v1, v2}, Ljava/lang/StringBuilder;->append(Ljava/lang/String;)Ljava/lang/StringBuilder;

    move-result-object v1

    invoke-virtual {v1}, Ljava/lang/StringBuilder;->toString()Ljava/lang/String;

    move-result-object v1

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto :goto_0

    :cond_6
    sget-object v0, Lde/tavendo/autobahn/AutobahnConnection;->TAG:Ljava/lang/String;

    const-string v1, "unknown WAMP message in AutobahnConnection.processAppMessage"

    invoke-static {v0, v1}, Landroid/util/Log;->d(Ljava/lang/String;Ljava/lang/String;)I

    goto/16 :goto_0
.end method

.method public publish(Ljava/lang/String;Ljava/lang/Object;)V
    .locals 2

    new-instance v0, Lde/tavendo/autobahn/AutobahnMessage$Publish;

    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mOutgoingPrefixes:Lde/tavendo/autobahn/PrefixMap;

    invoke-virtual {v1, p1}, Lde/tavendo/autobahn/PrefixMap;->shrink(Ljava/lang/String;)Ljava/lang/String;

    move-result-object v1

    invoke-direct {v0, v1, p2}, Lde/tavendo/autobahn/AutobahnMessage$Publish;-><init>(Ljava/lang/String;Ljava/lang/Object;)V

    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    invoke-virtual {v1, v0}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    return-void
.end method

.method public subscribe(Ljava/lang/String;Ljava/lang/Class;Lde/tavendo/autobahn/Autobahn$EventHandler;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/lang/String;",
            "Ljava/lang/Class",
            "<*>;",
            "Lde/tavendo/autobahn/Autobahn$EventHandler;",
            ")V"
        }
    .end annotation

    new-instance v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;

    invoke-direct {v0, p3, p2}, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;-><init>(Lde/tavendo/autobahn/Autobahn$EventHandler;Ljava/lang/Class;)V

    invoke-direct {p0, p1, v0}, Lde/tavendo/autobahn/AutobahnConnection;->subscribe(Ljava/lang/String;Lde/tavendo/autobahn/AutobahnConnection$SubMeta;)V

    return-void
.end method

.method public subscribe(Ljava/lang/String;Lorg/codehaus/jackson/type/TypeReference;Lde/tavendo/autobahn/Autobahn$EventHandler;)V
    .locals 1
    .annotation system Ldalvik/annotation/Signature;
        value = {
            "(",
            "Ljava/lang/String;",
            "Lorg/codehaus/jackson/type/TypeReference",
            "<*>;",
            "Lde/tavendo/autobahn/Autobahn$EventHandler;",
            ")V"
        }
    .end annotation

    new-instance v0, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;

    invoke-direct {v0, p3, p2}, Lde/tavendo/autobahn/AutobahnConnection$SubMeta;-><init>(Lde/tavendo/autobahn/Autobahn$EventHandler;Lorg/codehaus/jackson/type/TypeReference;)V

    invoke-direct {p0, p1, v0}, Lde/tavendo/autobahn/AutobahnConnection;->subscribe(Ljava/lang/String;Lde/tavendo/autobahn/AutobahnConnection$SubMeta;)V

    return-void
.end method

.method public unsubscribe()V
    .locals 3

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v0}, Ljava/util/concurrent/ConcurrentHashMap;->keySet()Ljava/util/Set;

    move-result-object v0

    invoke-interface {v0}, Ljava/util/Set;->iterator()Ljava/util/Iterator;

    move-result-object v1

    :goto_0
    invoke-interface {v1}, Ljava/util/Iterator;->hasNext()Z

    move-result v0

    if-nez v0, :cond_0

    return-void

    :cond_0
    invoke-interface {v1}, Ljava/util/Iterator;->next()Ljava/lang/Object;

    move-result-object v0

    check-cast v0, Ljava/lang/String;

    new-instance v2, Lde/tavendo/autobahn/AutobahnMessage$Unsubscribe;

    invoke-direct {v2, v0}, Lde/tavendo/autobahn/AutobahnMessage$Unsubscribe;-><init>(Ljava/lang/String;)V

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    invoke-virtual {v0, v2}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    goto :goto_0
.end method

.method public unsubscribe(Ljava/lang/String;)V
    .locals 2

    iget-object v0, p0, Lde/tavendo/autobahn/AutobahnConnection;->mSubs:Ljava/util/concurrent/ConcurrentHashMap;

    invoke-virtual {v0, p1}, Ljava/util/concurrent/ConcurrentHashMap;->containsKey(Ljava/lang/Object;)Z

    move-result v0

    if-eqz v0, :cond_0

    new-instance v0, Lde/tavendo/autobahn/AutobahnMessage$Unsubscribe;

    invoke-direct {v0, p1}, Lde/tavendo/autobahn/AutobahnMessage$Unsubscribe;-><init>(Ljava/lang/String;)V

    iget-object v1, p0, Lde/tavendo/autobahn/AutobahnConnection;->mWriter:Lde/tavendo/autobahn/WebSocketWriter;

    invoke-virtual {v1, v0}, Lde/tavendo/autobahn/WebSocketWriter;->forward(Ljava/lang/Object;)V

    :cond_0
    return-void
.end method
